// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/v1/user.proto

package authv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	providerv1 "github.com/mandacode-com/accounts-proto/go/provider/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = providerv1.ProviderType(0)
)

// define the regex for a UUID once up-front
var _user_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateLocalUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLocalUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLocalUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLocalUserRequestMultiError, or nil if none found.
func (m *CreateLocalUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLocalUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CreateLocalUserRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateLocalUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		err := CreateLocalUserRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateLocalUserRequestMultiError(errors)
	}

	return nil
}

func (m *CreateLocalUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateLocalUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *CreateLocalUserRequest) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateLocalUserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLocalUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLocalUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLocalUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLocalUserRequestMultiError) AllErrors() []error { return m }

// CreateLocalUserRequestValidationError is the validation error returned by
// CreateLocalUserRequest.Validate if the designated constraints aren't met.
type CreateLocalUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLocalUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLocalUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLocalUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLocalUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLocalUserRequestValidationError) ErrorName() string {
	return "CreateLocalUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLocalUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLocalUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLocalUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLocalUserRequestValidationError{}

// Validate checks the field values on CreateLocalUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLocalUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLocalUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLocalUserResponseMultiError, or nil if none found.
func (m *CreateLocalUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLocalUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CreateLocalUserResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLocalUserResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLocalUserResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLocalUserResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLocalUserResponseMultiError(errors)
	}

	return nil
}

func (m *CreateLocalUserResponse) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateLocalUserResponseMultiError is an error wrapping multiple validation
// errors returned by CreateLocalUserResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateLocalUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLocalUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLocalUserResponseMultiError) AllErrors() []error { return m }

// CreateLocalUserResponseValidationError is the validation error returned by
// CreateLocalUserResponse.Validate if the designated constraints aren't met.
type CreateLocalUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLocalUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLocalUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLocalUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLocalUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLocalUserResponseValidationError) ErrorName() string {
	return "CreateLocalUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLocalUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLocalUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLocalUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLocalUserResponseValidationError{}

// Validate checks the field values on DeleteLocalUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLocalUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLocalUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLocalUserRequestMultiError, or nil if none found.
func (m *DeleteLocalUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLocalUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteLocalUserRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteLocalUserRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteLocalUserRequest) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteLocalUserRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteLocalUserRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteLocalUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLocalUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLocalUserRequestMultiError) AllErrors() []error { return m }

// DeleteLocalUserRequestValidationError is the validation error returned by
// DeleteLocalUserRequest.Validate if the designated constraints aren't met.
type DeleteLocalUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLocalUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLocalUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLocalUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLocalUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLocalUserRequestValidationError) ErrorName() string {
	return "DeleteLocalUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLocalUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLocalUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLocalUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLocalUserRequestValidationError{}

// Validate checks the field values on DeleteLocalUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLocalUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLocalUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLocalUserResponseMultiError, or nil if none found.
func (m *DeleteLocalUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLocalUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteLocalUserResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteLocalUserResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteLocalUserResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteLocalUserResponseValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteLocalUserResponseMultiError(errors)
	}

	return nil
}

func (m *DeleteLocalUserResponse) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteLocalUserResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteLocalUserResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteLocalUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLocalUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLocalUserResponseMultiError) AllErrors() []error { return m }

// DeleteLocalUserResponseValidationError is the validation error returned by
// DeleteLocalUserResponse.Validate if the designated constraints aren't met.
type DeleteLocalUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLocalUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLocalUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLocalUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLocalUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLocalUserResponseValidationError) ErrorName() string {
	return "DeleteLocalUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLocalUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLocalUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLocalUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLocalUserResponseValidationError{}

// Validate checks the field values on UpdateLocalUserEmailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLocalUserEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLocalUserEmailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLocalUserEmailRequestMultiError, or nil if none found.
func (m *UpdateLocalUserEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLocalUserEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UpdateLocalUserEmailRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetNewEmail()); err != nil {
		err = UpdateLocalUserEmailRequestValidationError{
			field:  "NewEmail",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateLocalUserEmailRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateLocalUserEmailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateLocalUserEmailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *UpdateLocalUserEmailRequest) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateLocalUserEmailRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateLocalUserEmailRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateLocalUserEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLocalUserEmailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLocalUserEmailRequestMultiError) AllErrors() []error { return m }

// UpdateLocalUserEmailRequestValidationError is the validation error returned
// by UpdateLocalUserEmailRequest.Validate if the designated constraints
// aren't met.
type UpdateLocalUserEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLocalUserEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLocalUserEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLocalUserEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLocalUserEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLocalUserEmailRequestValidationError) ErrorName() string {
	return "UpdateLocalUserEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLocalUserEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLocalUserEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLocalUserEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLocalUserEmailRequestValidationError{}

// Validate checks the field values on UpdateLocalUserEmailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLocalUserEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLocalUserEmailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLocalUserEmailResponseMultiError, or nil if none found.
func (m *UpdateLocalUserEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLocalUserEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UpdateLocalUserEmailResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetUpdatedEmail()); err != nil {
		err = UpdateLocalUserEmailResponseValidationError{
			field:  "UpdatedEmail",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLocalUserEmailResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLocalUserEmailResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLocalUserEmailResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateLocalUserEmailResponseMultiError(errors)
	}

	return nil
}

func (m *UpdateLocalUserEmailResponse) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateLocalUserEmailResponse) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *UpdateLocalUserEmailResponse) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateLocalUserEmailResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateLocalUserEmailResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateLocalUserEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLocalUserEmailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLocalUserEmailResponseMultiError) AllErrors() []error { return m }

// UpdateLocalUserEmailResponseValidationError is the validation error returned
// by UpdateLocalUserEmailResponse.Validate if the designated constraints
// aren't met.
type UpdateLocalUserEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLocalUserEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLocalUserEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLocalUserEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLocalUserEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLocalUserEmailResponseValidationError) ErrorName() string {
	return "UpdateLocalUserEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLocalUserEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLocalUserEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLocalUserEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLocalUserEmailResponseValidationError{}

// Validate checks the field values on UpdateEmailVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmailVerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmailVerificationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateEmailVerificationRequestMultiError, or nil if none found.
func (m *UpdateEmailVerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmailVerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UpdateEmailVerificationRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Verified

	if len(errors) > 0 {
		return UpdateEmailVerificationRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateEmailVerificationRequest) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateEmailVerificationRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateEmailVerificationRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateEmailVerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmailVerificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmailVerificationRequestMultiError) AllErrors() []error { return m }

// UpdateEmailVerificationRequestValidationError is the validation error
// returned by UpdateEmailVerificationRequest.Validate if the designated
// constraints aren't met.
type UpdateEmailVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmailVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmailVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmailVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmailVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmailVerificationRequestValidationError) ErrorName() string {
	return "UpdateEmailVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmailVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmailVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmailVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmailVerificationRequestValidationError{}

// Validate checks the field values on UpdateEmailVerificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmailVerificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmailVerificationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateEmailVerificationResponseMultiError, or nil if none found.
func (m *UpdateEmailVerificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmailVerificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = UpdateEmailVerificationResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Verified

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEmailVerificationResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEmailVerificationResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEmailVerificationResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEmailVerificationResponseMultiError(errors)
	}

	return nil
}

func (m *UpdateEmailVerificationResponse) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateEmailVerificationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateEmailVerificationResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateEmailVerificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmailVerificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmailVerificationResponseMultiError) AllErrors() []error { return m }

// UpdateEmailVerificationResponseValidationError is the validation error
// returned by UpdateEmailVerificationResponse.Validate if the designated
// constraints aren't met.
type UpdateEmailVerificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmailVerificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmailVerificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmailVerificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmailVerificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmailVerificationResponseValidationError) ErrorName() string {
	return "UpdateEmailVerificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmailVerificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmailVerificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmailVerificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmailVerificationResponseValidationError{}

// Validate checks the field values on CreateOAuthUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOAuthUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOAuthUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOAuthUserRequestMultiError, or nil if none found.
func (m *CreateOAuthUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOAuthUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CreateOAuthUserRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if m.AccessToken != nil {

		if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
			err := CreateOAuthUserRequestValidationError{
				field:  "AccessToken",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Code != nil {

		if utf8.RuneCountInString(m.GetCode()) < 1 {
			err := CreateOAuthUserRequestValidationError{
				field:  "Code",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateOAuthUserRequestMultiError(errors)
	}

	return nil
}

func (m *CreateOAuthUserRequest) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateOAuthUserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOAuthUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOAuthUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOAuthUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOAuthUserRequestMultiError) AllErrors() []error { return m }

// CreateOAuthUserRequestValidationError is the validation error returned by
// CreateOAuthUserRequest.Validate if the designated constraints aren't met.
type CreateOAuthUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOAuthUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOAuthUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOAuthUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOAuthUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOAuthUserRequestValidationError) ErrorName() string {
	return "CreateOAuthUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOAuthUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOAuthUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOAuthUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOAuthUserRequestValidationError{}

// Validate checks the field values on CreateOAuthUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOAuthUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOAuthUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOAuthUserResponseMultiError, or nil if none found.
func (m *CreateOAuthUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOAuthUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CreateOAuthUserResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateOAuthUserResponseValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOAuthUserResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOAuthUserResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOAuthUserResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOAuthUserResponseMultiError(errors)
	}

	return nil
}

func (m *CreateOAuthUserResponse) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateOAuthUserResponse) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *CreateOAuthUserResponse) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateOAuthUserResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOAuthUserResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOAuthUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOAuthUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOAuthUserResponseMultiError) AllErrors() []error { return m }

// CreateOAuthUserResponseValidationError is the validation error returned by
// CreateOAuthUserResponse.Validate if the designated constraints aren't met.
type CreateOAuthUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOAuthUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOAuthUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOAuthUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOAuthUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOAuthUserResponseValidationError) ErrorName() string {
	return "CreateOAuthUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOAuthUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOAuthUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOAuthUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOAuthUserResponseValidationError{}

// Validate checks the field values on DeleteOAuthUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOAuthUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOAuthUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOAuthUserRequestMultiError, or nil if none found.
func (m *DeleteOAuthUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOAuthUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteOAuthUserRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if len(errors) > 0 {
		return DeleteOAuthUserRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteOAuthUserRequest) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteOAuthUserRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOAuthUserRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOAuthUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOAuthUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOAuthUserRequestMultiError) AllErrors() []error { return m }

// DeleteOAuthUserRequestValidationError is the validation error returned by
// DeleteOAuthUserRequest.Validate if the designated constraints aren't met.
type DeleteOAuthUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOAuthUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOAuthUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOAuthUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOAuthUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOAuthUserRequestValidationError) ErrorName() string {
	return "DeleteOAuthUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOAuthUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOAuthUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOAuthUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOAuthUserRequestValidationError{}

// Validate checks the field values on DeleteOAuthUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOAuthUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOAuthUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOAuthUserResponseMultiError, or nil if none found.
func (m *DeleteOAuthUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOAuthUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DeleteOAuthUserResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteOAuthUserResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteOAuthUserResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteOAuthUserResponseValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteOAuthUserResponseMultiError(errors)
	}

	return nil
}

func (m *DeleteOAuthUserResponse) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteOAuthUserResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteOAuthUserResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOAuthUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOAuthUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOAuthUserResponseMultiError) AllErrors() []error { return m }

// DeleteOAuthUserResponseValidationError is the validation error returned by
// DeleteOAuthUserResponse.Validate if the designated constraints aren't met.
type DeleteOAuthUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOAuthUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOAuthUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOAuthUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOAuthUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOAuthUserResponseValidationError) ErrorName() string {
	return "DeleteOAuthUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOAuthUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOAuthUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOAuthUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOAuthUserResponseValidationError{}

// Validate checks the field values on SyncOAuthUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncOAuthUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncOAuthUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncOAuthUserRequestMultiError, or nil if none found.
func (m *SyncOAuthUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncOAuthUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = SyncOAuthUserRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if m.AccessToken != nil {

		if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
			err := SyncOAuthUserRequestValidationError{
				field:  "AccessToken",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Code != nil {

		if utf8.RuneCountInString(m.GetCode()) < 1 {
			err := SyncOAuthUserRequestValidationError{
				field:  "Code",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return SyncOAuthUserRequestMultiError(errors)
	}

	return nil
}

func (m *SyncOAuthUserRequest) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SyncOAuthUserRequestMultiError is an error wrapping multiple validation
// errors returned by SyncOAuthUserRequest.ValidateAll() if the designated
// constraints aren't met.
type SyncOAuthUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncOAuthUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncOAuthUserRequestMultiError) AllErrors() []error { return m }

// SyncOAuthUserRequestValidationError is the validation error returned by
// SyncOAuthUserRequest.Validate if the designated constraints aren't met.
type SyncOAuthUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncOAuthUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncOAuthUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncOAuthUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncOAuthUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncOAuthUserRequestValidationError) ErrorName() string {
	return "SyncOAuthUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncOAuthUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncOAuthUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncOAuthUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncOAuthUserRequestValidationError{}

// Validate checks the field values on SyncOAuthUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncOAuthUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncOAuthUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncOAuthUserResponseMultiError, or nil if none found.
func (m *SyncOAuthUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncOAuthUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = SyncOAuthUserResponseValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetSyncedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncOAuthUserResponseValidationError{
					field:  "SyncedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncOAuthUserResponseValidationError{
					field:  "SyncedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSyncedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncOAuthUserResponseValidationError{
				field:  "SyncedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SyncOAuthUserResponseMultiError(errors)
	}

	return nil
}

func (m *SyncOAuthUserResponse) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SyncOAuthUserResponseMultiError is an error wrapping multiple validation
// errors returned by SyncOAuthUserResponse.ValidateAll() if the designated
// constraints aren't met.
type SyncOAuthUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncOAuthUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncOAuthUserResponseMultiError) AllErrors() []error { return m }

// SyncOAuthUserResponseValidationError is the validation error returned by
// SyncOAuthUserResponse.Validate if the designated constraints aren't met.
type SyncOAuthUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncOAuthUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncOAuthUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncOAuthUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncOAuthUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncOAuthUserResponseValidationError) ErrorName() string {
	return "SyncOAuthUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SyncOAuthUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncOAuthUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncOAuthUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncOAuthUserResponseValidationError{}
